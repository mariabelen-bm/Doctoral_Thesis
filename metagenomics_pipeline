##########################
## METAGENOMIC ANALYSIS ##
##########################

# Download function gdrive_download:
function gdrive_download () {
 CONFIRM=$(wget --quiet --save-cookies /tmp/cookies.txt 
--keep-session-cookies --no-check-certificate 
"https://docs.google.com/uc?export=download&id=$1" -O- | sed -rn 
's/.*confirm=([0-9A-Za-z_]+).*/\1\n/p')
 wget --load-cookies /tmp/cookies.txt 
"https://docs.google.com/uc?export=download&confirm=$CONFIRM&id=$1" -O $2
 rm -rf /tmp/cookies.txt
}

# Installation of khmer:
sudo yum install -y python3-devel gcc-c++ make
conda create --name khmerEnv python=3.6

# Open the terminal and activate the conda environment:
conda activate base

# Create a new conda environment for Khmer:
conda create --name khmerEnv

# Activate the conda environment
conda install -c bioconda khmer

#######
## 1 ##
#######

######################
## QUALITY ANALYSIS ##
######################

# A FastQC analysis is used to assess the quality of genomic sequencing data, such as those generated by platforms like Illumina. It evaluates base quality, 
# base composition, the presence of adapters, sequence duplication levels, read length distribution, and the overrepresentation of sequences.

# Installation of FASTQC 
conda install -c bioconda fastqc

# Quality analysis
conda activate khmerEnv
fastqc *.gz -o ~/metagenomic_analysis/1_FASTQC_RESULTS
conda deactivate

#######
## 2 ##
#######

################
## INTERLEAVE ##
################

# Interleaving in metagenomics is the process of combining two paired-end read files into a single file. In this interleaved file, 
# the forward and reverse reads of each pair are arranged alternately (i.e., the forward read of the pair is followed by its corresponding reverse read). 
# Interleaving is primarily used to facilitate data processing by bioinformatics tools that require paired-end reads to be stored in a single file.

# Unzip the fastq.gz in fastq
for i in {1..32}
do
    gunzip -c ${i}_R1_001.fastq.gz > ${i}_R1_001.fastq
    gunzip -c ${i}_R2_001.fastq.gz > ${i}_R2_001.fastq
done

# Interleaved
for file in *_R1_001.fastq
do
   sample=${file%%_R1_001.fastq}
   echo “interleave-reads.py ${sample}_R1_001.fastq ${sample}_R2_001.fastq -or ${sample}.pe.fq”
done > interleave.sh

cat interleave.sh | parallel

# Remove unnecessary files and organize them
rm -rf *.fastq
cd ...
mkdir 2_INTERLEAVED
cd 0_SAMPLES
mv *.pe.fq ../2_INTERLEAVED
cd ../2_INTERLEAVED

#######
## 3 ##
#######

#######################
## QUALITY FILTERING ##
#######################

# The purpose of this step is to remove low-quality reads from sequencing data, 
# thereby improving the reliability of downstream analyses such as assemblies or annotations. 
# This ensures that the reads used meet a minimum quality standard, reducing errors and artifacts in the final results.

# The filtering process employs the following parameters:
# -Q33: Specifies that the quality scores are encoded in the Phred+33 format, commonly used in Illumina sequencing platforms.
# -q 30: Filters out reads where the average base quality is below 30, corresponding to high-quality bases.
# -p 50: Retains only reads in which at least 50% of the bases meet or exceed the specified quality threshold.

for file in *.pe.fq 
do
  newfile=${file%%.pe.fq}   
  echo "fastq_quality_filter -i ${file} -Q33 -q 30 -p 50 -o ${newfile}.pe.qc.fq"
done > qual_filter.sh

cat qual_filter.sh | parallel

#######
## 4 ##
#######

############################
## REMOVE SHORT SEQUENCES ## 
############################

# Download function gdrive_download:
function gdrive_download () {
 CONFIRM=$(wget --quiet --save-cookies /tmp/cookies.txt --keep-session-cookies --no-check-certificate 
"https://docs.google.com/uc?export=download&id=$1" -O- | sed -rn 's/.*confirm=([0-9A-Za-z_]+).*/\1\n/p')
 wget --load-cookies /tmp/cookies.txt "https://docs.google.com/uc?export=download&confirm=$CONFIRM&id=$1" -O $2
 rm -rf /tmp/cookies.txt
}

# Downlowad filter_fastq_by_length.py script
gdrive_download 1w-OyfdEuMi38utz4cN9g_ng-S9kNeOj9 filter_fastq_by_length.py

# Remove short sequences
for file in *pe.qc.fq
do
  echo "python2.7 filter_fastq_by_length.py ${file} ${file}.cut 50"
done > remove_short.sh

cat remove_short.sh | parallel

#######
## 5 ##
#######

#######################################################
## EXTRACT PAIRED ENDS, RENAME FILES AND MERGE FILES ## 
#######################################################

# In this step, paired-end sequence files are processed after quality cleaning. It includes three main steps: extracting paired reads, 
# removing unnecessary files, and renaming and organizing the output files to facilitate subsequent analysis.

# Extracting paired-ends
for file in *.pe.qc.fq.cut
do
   echo "extract-paired-reads.py ${file}"
done > extract_command.sh

cat extract_command.sh | parallel

# Remove unnecessary files
rm -rf *.tr.qc.fq.cut

# Rename files and merging pe and se files
for file in *.pe
do
   sample=${file%%.pe.qc.fq.cut.pe}
   mv ${file} ${sample}.pe.qc.fq
done

for file in *.se
do
   sample=${file%%.pe.qc.fq.cut.se}
   mv ${file} ${sample}.se.qc.fq
done

#######
## 6 ##
#######

##############################
## PREPARATION FOR ASSEMBLY ##
##############################

for file in *.pe.qc.fq
do
   echo "split-paired-reads.py ${file}"
done > split_command.sh

cat split_command.sh | parallel

